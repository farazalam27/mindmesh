version: '3.8'

services:
  # Database Services
  postgresql:
    image: postgres:15-alpine
    container_name: mindmesh-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mindmesh}
      POSTGRES_USER: ${POSTGRES_USER:-mindmesh_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgresql/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - mindmesh-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mindmesh_user} -d ${POSTGRES_DB:-mindmesh}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: mindmesh-redis
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - mindmesh-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Application Services
  ideas-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.ideas
    image: mindmesh/ideas-service:${VERSION:-latest}
    container_name: mindmesh-ideas-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-mindmesh}
      POSTGRES_USER: ${POSTGRES_USER:-mindmesh_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ideas_logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - mindmesh-network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  voting-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.voting
    image: mindmesh/voting-service:${VERSION:-latest}
    container_name: mindmesh-voting-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-mindmesh}
      POSTGRES_USER: ${POSTGRES_USER:-mindmesh_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      IDEAS_SERVICE_URL: http://ideas-service:3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - voting_logs:/app/logs
    ports:
      - "3002:3002"
    networks:
      - mindmesh-network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      ideas-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  analytics-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.analytics
    image: mindmesh/analytics-service:${VERSION:-latest}
    container_name: mindmesh-analytics-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3003
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-mindmesh}
      POSTGRES_USER: ${POSTGRES_USER:-mindmesh_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      IDEAS_SERVICE_URL: http://ideas-service:3001
      VOTING_SERVICE_URL: http://voting-service:3002
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - analytics_logs:/app/logs
      - analytics_data:/app/data
    ports:
      - "3003:3003"
    networks:
      - mindmesh-network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      ideas-service:
        condition: service_healthy
      voting-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  decision-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.decision
    image: mindmesh/decision-service:${VERSION:-latest}
    container_name: mindmesh-decision-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3004
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-mindmesh}
      POSTGRES_USER: ${POSTGRES_USER:-mindmesh_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      IDEAS_SERVICE_URL: http://ideas-service:3001
      VOTING_SERVICE_URL: http://voting-service:3002
      ANALYTICS_SERVICE_URL: http://analytics-service:3003
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - decision_logs:/app/logs
      - decision_models:/app/models
    ports:
      - "3004:3004"
    networks:
      - mindmesh-network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      analytics-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Reverse Proxy / Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mindmesh-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mindmesh-network
    depends_on:
      - ideas-service
      - voting-service
      - analytics-service
      - decision-service
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mindmesh-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mindmesh-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana:latest
    container_name: mindmesh-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - mindmesh-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

networks:
  mindmesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ideas_logs:
    driver: local
  voting_logs:
    driver: local
  analytics_logs:
    driver: local
  analytics_data:
    driver: local
  decision_logs:
    driver: local
  decision_models:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local