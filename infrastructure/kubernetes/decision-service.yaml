apiVersion: apps/v1
kind: Deployment
metadata:
  name: decision-service
  namespace: mindmesh
  labels:
    app: decision-service
    version: v1
    tier: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: decision-service
  template:
    metadata:
      labels:
        app: decision-service
        version: v1
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      serviceAccountName: mindmesh-service-account
      imagePullSecrets:
      - name: docker-registry-secret
      containers:
      - name: decision-service
        image: mindmesh/decision-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3004
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: NODE_ENV
        - name: PORT
          value: "3004"
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: POSTGRES_HOST
        - name: POSTGRES_PORT
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: POSTGRES_PORT
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mindmesh-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mindmesh-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mindmesh-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: mindmesh-secrets
              key: JWT_SECRET
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: mindmesh-secrets
              key: OPENAI_API_KEY
        - name: IDEAS_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: IDEAS_SERVICE_URL
        - name: VOTING_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: VOTING_SERVICE_URL
        - name: ANALYTICS_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: ANALYTICS_SERVICE_URL
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mindmesh-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 3004
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3004
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: temp-dir
          mountPath: /tmp
        - name: decision-models
          mountPath: /app/models
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: temp-dir
        emptyDir: {}
      - name: decision-models
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - decision-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: decision-service
  namespace: mindmesh
  labels:
    app: decision-service
    version: v1
spec:
  ports:
  - port: 3004
    targetPort: 3004
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: decision-service
  type: ClusterIP