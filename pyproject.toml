[tool.poetry]
name = "mindmesh"
version = "0.1.0"
description = "MindMesh - Distributed Data Processing Platform"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
python = "^3.9"

[tool.poetry.dependencies]
python = "^3.9"
pyspark = "^3.5.0"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"
celery = {extras = ["redis"], version = "^5.3.4"}
redis = "^5.0.1"
psycopg2-binary = "^2.9.9"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
boto3 = "^1.29.7"
python-multipart = "^0.0.6"
httpx = "^0.25.2"
prometheus-client = "^0.19.0"
structlog = "^23.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
behave = "^1.2.6"
black = "^23.11.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
isort = "^5.12.0"
pre-commit = "^3.5.0"
types-redis = "^4.6.0"
types-requests = "^2.31.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "pyspark.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "behave.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-ra -q --strict-markers --cov=mindmesh --cov-report=term-missing"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["mindmesh"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false